这道题有一点借鉴了快速排序的思想。因为大部分的元素属于排序好的，所以一直向后，找一个小于最大元素的数字，同时要一直更新最大的元素。
然后再向前再找一个大于最小值的元素，同时一直更新最小的元素。

  public int findUnsortedSubarray(int[] nums) {
       if ((nums == null)|| (nums.length == 0)) return 0;
       int front = -1 , tail = -1;
       int SofarMax = nums[0];
        
       for (int i = 0; i < nums.length; i++){
           if(nums[i]< SofarMax){
               tail = i;
           }
           
           SofarMax = Math.max(nums[i],SofarMax);
       }
      int SofarMin = nums[nums.length -1];
      for (int j = nums.length -1 ;j >=0;j--){
          if (nums[j] > SofarMin){
              front = j;
          }
          
        SofarMin = Math.min(SofarMin, nums[j]);
      }
        
        if ((front == -1)|| (tail ==-1)) return 0;
        else{ return (tail - front)+1;}
        
    }
